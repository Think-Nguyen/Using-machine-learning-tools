geom_abline(linetype = "dashed") +
labs(title = "ROC Curves for logistic regression models",
x = "1 - specificity",
y = "sensitivity") +
theme_minimal()
---
title: "STATS 7022 - Data Science PG Assignment 2"
install.packages("tinytex")
install.packages(pkgs = tinytex, repos = NULL, lib = Downloads)
knitr::opts_chunk$set(echo = TRUE,
message=FALSE,
warning = FALSE,
fig.dim=c(6,5),
fig.align='center')
pacman::p_load(tidyverse, bookdown, readr, dplyr, tidymodels, pROC)
# Read in the data
data <- readRDS('./diamonds.rds')
# Display the first 10 lines of the data
head(data, 10)
# Check missing values
sum(is.na(data))
# Remove missing values
data_cleaned <- na.omit(data)
# Check missing values after removing
sum(is.na(data_cleaned))
# Create 'cut' column based on the first character of 'c.grade'
data_cleaned <- data_cleaned %>%
mutate(
cut = ifelse(substr(c.grade, 1, 1) == '1', 'premium', 'ideal')
)
# Create table of 'cut'
cut_table <- data_cleaned %>% count(cut)
cut_table
# Create 'colour' column based on the second character of 'c.grade'
data_cleaned <- data_cleaned %>%
mutate(
colour = substr(c.grade, 2, 2)
)
# Create table of 'cut'
colour_table <- data_cleaned %>% count(colour)
colour_table
# Create a map for clarity
clarity_map <- c('0' = 'IF',
'1' = 'VVS1',
'2' = 'VVS2',
'3' = 'VS1',
'4' = 'VS2',
'5' = 'SI1',
'6' = 'SI2',
'7' = 'I1')
# Create 'clarity' column based on the third character of 'c.grade'
data_cleaned <- data_cleaned %>%
mutate(clarity = clarity_map[substr(c.grade, 3, 3)])
# Create table of 'cut'
clarity_table <- data_cleaned %>% count(clarity)
clarity_table
data_2 <- data_cleaned %>%
dplyr::select(cut, price, volume)
data_2 %>% head()
data_2 <- data_2 %>%
mutate(cut = as.factor(cut))
data_2 %>% head()
# Preprocessor
recipe_cp <- recipe(cut ~ price, data = data_2) %>%
step_normalize()
# Logistic regression model
log_reg_model <- logistic_reg() %>%
set_mode('classification') %>%
set_engine('glm')
# Workflow
wf_cp <- workflow() %>%
add_recipe(recipe_cp) %>%
add_model(log_reg_model)
wf_cp
# Preprocessor
recipe_cv <- recipe(cut ~ volume, data = data_2) %>%
step_normalize(all_predictors())
# Workflow
wf_cv <- workflow() %>%
add_recipe(recipe_cv) %>%
add_model(log_reg_model)
wf_cv
# Fit the models
fit_cp <- fit(wf_cp, data = data_2)
fit_cv <- fit(wf_cv, data = data_2)
# Predict probabilities and add true class to predictions
pred_price <- predict(fit_cp, data_2, type = "prob") %>%
bind_cols(data_2 %>% dplyr::select(cut))
pred_volume <- predict(fit_cv, data_2, type = "prob") %>%
bind_cols(data_2 %>% dplyr::select(cut))
# Calculate ROC curve metrics
roc_price <- pred_price %>%
roc_curve(truth = cut, .pred_ideal)
roc_volume <- pred_volume %>%
roc_curve(truth = cut, .pred_ideal)
# Add model names to each table
roc_price <- roc_price %>%
mutate(model = "Price")
roc_volume <- roc_volume %>%
mutate(model = "Volume")
# Combine the two tables
roc_data <- bind_rows(roc_price, roc_volume)
# Plot ROC curves
ggplot(roc_data, aes(x = 1 - specificity, y = sensitivity, color = model)) +
geom_line() +
geom_abline(linetype = "dashed") +
labs(x = "1 - specificity",
y = "sensitivity") +
theme_minimal() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 0.5))
knitr::opts_chunk$set(echo = TRUE,
message=FALSE,
warning = FALSE,
fig.dim=c(6,5),
fig.align='center')
pacman::p_load(tidyverse, bookdown, readr, dplyr, tidymodels, pROC)
# Read in the data
data <- readRDS('./diamonds.rds')
# Display the first 10 lines of the data
head(data, 10)
# Check missing values
sum(is.na(data))
# Remove missing values
data_cleaned <- na.omit(data)
# Check missing values after removing
sum(is.na(data_cleaned))
# Create 'cut' column based on the first character of 'c.grade'
data_cleaned <- data_cleaned %>%
mutate(
cut = ifelse(substr(c.grade, 1, 1) == '1', 'premium', 'ideal')
)
# Create table of 'cut'
cut_table <- data_cleaned %>% count(cut)
cut_table
# Create 'colour' column based on the second character of 'c.grade'
data_cleaned <- data_cleaned %>%
mutate(
colour = substr(c.grade, 2, 2)
)
# Create table of 'cut'
colour_table <- data_cleaned %>% count(colour)
colour_table
# Create a map for clarity
clarity_map <- c('0' = 'IF',
'1' = 'VVS1',
'2' = 'VVS2',
'3' = 'VS1',
'4' = 'VS2',
'5' = 'SI1',
'6' = 'SI2',
'7' = 'I1')
# Create 'clarity' column based on the third character of 'c.grade'
data_cleaned <- data_cleaned %>%
mutate(clarity = clarity_map[substr(c.grade, 3, 3)])
# Create table of 'cut'
clarity_table <- data_cleaned %>% count(clarity)
clarity_table
data_2 <- data_cleaned %>%
dplyr::select(cut, price, volume)
data_2 %>% head()
data_2 <- data_2 %>%
mutate(cut = as.factor(cut))
data_2 %>% head()
# Preprocessor
recipe_cp <- recipe(cut ~ price, data = data_2) %>%
step_normalize()
# Logistic regression model
log_reg_model <- logistic_reg() %>%
set_mode('classification') %>%
set_engine('glm')
# Workflow
wf_cp <- workflow() %>%
add_recipe(recipe_cp) %>%
add_model(log_reg_model)
wf_cp
# Preprocessor
recipe_cv <- recipe(cut ~ volume, data = data_2) %>%
step_normalize(all_predictors())
# Workflow
wf_cv <- workflow() %>%
add_recipe(recipe_cv) %>%
add_model(log_reg_model)
wf_cv
# Fit the models
fit_cp <- fit(wf_cp, data = data_2)
fit_cv <- fit(wf_cv, data = data_2)
# Predict probabilities and add true class to predictions
pred_price <- predict(fit_cp, data_2, type = "prob") %>%
bind_cols(data_2 %>% dplyr::select(cut))
pred_volume <- predict(fit_cv, data_2, type = "prob") %>%
bind_cols(data_2 %>% dplyr::select(cut))
# Calculate ROC curve metrics
roc_price <- pred_price %>%
roc_curve(truth = cut, .pred_ideal)
roc_volume <- pred_volume %>%
roc_curve(truth = cut, .pred_ideal)
# Add model names to each table
roc_price <- roc_price %>%
mutate(model = "Price")
roc_volume <- roc_volume %>%
mutate(model = "Volume")
# Combine the two tables
roc_data <- bind_rows(roc_price, roc_volume)
# Plot ROC curves
ggplot(roc_data, aes(x = 1 - specificity, y = sensitivity, color = model)) +
geom_line() +
geom_abline(linetype = "dashed") +
labs(x = "1 - specificity",
y = "sensitivity") +
theme_minimal() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 0.5))
---
title: "STATS 7022 - Data Science PG Assignment 2"
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,
message=FALSE,
warning = FALSE,
fig.dim=c(6,5),
fig.align='center')
# Chunk 2
pacman::p_load(tidyverse, bookdown, readr, dplyr, tidymodels, pROC)
# Chunk 3
# Read in the data
data <- readRDS('./diamonds.rds')
# Display the first 10 lines of the data
head(data, 10)
# Chunk 4
# Check missing values
sum(is.na(data))
# Remove missing values
data_cleaned <- na.omit(data)
# Check missing values after removing
sum(is.na(data_cleaned))
# Chunk 5
# Create 'cut' column based on the first character of 'c.grade'
data_cleaned <- data_cleaned %>%
mutate(
cut = ifelse(substr(c.grade, 1, 1) == '1', 'premium', 'ideal')
)
# Create table of 'cut'
cut_table <- data_cleaned %>% count(cut)
cut_table
# Chunk 6
# Create 'colour' column based on the second character of 'c.grade'
data_cleaned <- data_cleaned %>%
mutate(
colour = substr(c.grade, 2, 2)
)
# Create table of 'cut'
colour_table <- data_cleaned %>% count(colour)
colour_table
# Chunk 7
# Create a map for clarity
clarity_map <- c('0' = 'IF',
'1' = 'VVS1',
'2' = 'VVS2',
'3' = 'VS1',
'4' = 'VS2',
'5' = 'SI1',
'6' = 'SI2',
'7' = 'I1')
# Create 'clarity' column based on the third character of 'c.grade'
data_cleaned <- data_cleaned %>%
mutate(clarity = clarity_map[substr(c.grade, 3, 3)])
# Create table of 'cut'
clarity_table <- data_cleaned %>% count(clarity)
clarity_table
# Chunk 8
data_2 <- data_cleaned %>%
dplyr::select(cut, price, volume)
data_2 %>% head()
# Chunk 9
data_2 <- data_2 %>%
mutate(cut = as.factor(cut))
data_2 %>% head()
# Chunk 10
# Preprocessor
recipe_cp <- recipe(cut ~ price, data = data_2) %>%
step_normalize()
# Logistic regression model
log_reg_model <- logistic_reg() %>%
set_mode('classification') %>%
set_engine('glm')
# Workflow
wf_cp <- workflow() %>%
add_recipe(recipe_cp) %>%
add_model(log_reg_model)
wf_cp
# Chunk 11
# Preprocessor
recipe_cv <- recipe(cut ~ volume, data = data_2) %>%
step_normalize(all_predictors())
# Workflow
wf_cv <- workflow() %>%
add_recipe(recipe_cv) %>%
add_model(log_reg_model)
wf_cv
# Chunk 12: data_2
# Fit the models
fit_cp <- fit(wf_cp, data = data_2)
fit_cv <- fit(wf_cv, data = data_2)
# Predict probabilities and add true class to predictions
pred_price <- predict(fit_cp, data_2, type = "prob") %>%
bind_cols(data_2 %>% dplyr::select(cut))
pred_volume <- predict(fit_cv, data_2, type = "prob") %>%
bind_cols(data_2 %>% dplyr::select(cut))
# Calculate ROC curve metrics
roc_price <- pred_price %>%
roc_curve(truth = cut, .pred_ideal)
roc_volume <- pred_volume %>%
roc_curve(truth = cut, .pred_ideal)
# Add model names to each table
roc_price <- roc_price %>%
mutate(model = "Price")
roc_volume <- roc_volume %>%
mutate(model = "Volume")
# Combine the two tables
roc_data <- bind_rows(roc_price, roc_volume)
# Plot ROC curves
ggplot(roc_data, aes(x = 1 - specificity, y = sensitivity, color = model)) +
geom_line() +
geom_abline(linetype = "dashed") +
labs(x = "1 - specificity",
y = "sensitivity") +
theme_minimal() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 0.5))
# Chunk 10
# Preprocessor
recipe_cp <- recipe(cut ~ price, data = data_2) %>%
step_normalize()
# Logistic regression model
log_reg_model <- logistic_reg() %>%
set_mode('classification') %>%
set_engine('glm')
# Workflow
wf_cp <- workflow() %>%
add_recipe(recipe_cp) %>%
add_model(log_reg_model)
wf_cp
# Chunk 11
# Preprocessor
recipe_cv <- recipe(cut ~ volume, data = data_2) %>%
step_normalize()
# Workflow
wf_cv <- workflow() %>%
add_recipe(recipe_cv) %>%
add_model(log_reg_model)
wf_cv
# Chunk 12: data_2
# Fit the models
fit_cp <- fit(wf_cp, data = data_2)
fit_cv <- fit(wf_cv, data = data_2)
# Predict probabilities and add true class to predictions
pred_price <- predict(fit_cp, data_2, type = "prob") %>%
bind_cols(data_2 %>% dplyr::select(cut))
pred_volume <- predict(fit_cv, data_2, type = "prob") %>%
bind_cols(data_2 %>% dplyr::select(cut))
# Calculate ROC curve metrics
roc_price <- pred_price %>%
roc_curve(truth = cut, .pred_ideal)
roc_volume <- pred_volume %>%
roc_curve(truth = cut, .pred_ideal)
# Add model names to each table
roc_price <- roc_price %>%
mutate(model = "Price")
roc_volume <- roc_volume %>%
mutate(model = "Volume")
# Combine the two tables
roc_data <- bind_rows(roc_price, roc_volume)
# Plot ROC curves
ggplot(roc_data, aes(x = 1 - specificity, y = sensitivity, color = model)) +
geom_line() +
geom_abline(linetype = "dashed") +
labs(x = "1 - specificity",
y = "sensitivity") +
theme_minimal() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 0.5))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,
message=FALSE,
warning = FALSE,
fig.dim=c(6,5),
fig.align='center')
# Chunk 2
pacman::p_load(tidyverse, bookdown, readr, dplyr, tidymodels, pROC)
# Chunk 3
# Read in the data
data <- readRDS('./diamonds.rds')
# Display the first 10 lines of the data
head(data, 10)
# Chunk 4
# Check missing values
sum(is.na(data))
# Remove missing values
data_cleaned <- na.omit(data)
# Check missing values after removing
sum(is.na(data_cleaned))
# Chunk 5
# Create 'cut' column based on the first character of 'c.grade'
data_cleaned <- data_cleaned %>%
mutate(
cut = ifelse(substr(c.grade, 1, 1) == '1', 'premium', 'ideal')
)
# Create table of 'cut'
cut_table <- data_cleaned %>% count(cut)
cut_table
# Chunk 6
# Create 'colour' column based on the second character of 'c.grade'
data_cleaned <- data_cleaned %>%
mutate(
colour = substr(c.grade, 2, 2)
)
# Create table of 'cut'
colour_table <- data_cleaned %>% count(colour)
colour_table
# Chunk 7
# Create a map for clarity
clarity_map <- c('0' = 'IF',
'1' = 'VVS1',
'2' = 'VVS2',
'3' = 'VS1',
'4' = 'VS2',
'5' = 'SI1',
'6' = 'SI2',
'7' = 'I1')
# Create 'clarity' column based on the third character of 'c.grade'
data_cleaned <- data_cleaned %>%
mutate(clarity = clarity_map[substr(c.grade, 3, 3)])
# Create table of 'cut'
clarity_table <- data_cleaned %>% count(clarity)
clarity_table
# Chunk 8
data_2 <- data_cleaned %>%
dplyr::select(cut, price, volume)
data_2 %>% head()
# Chunk 9
data_2 <- data_2 %>%
mutate(cut = as.factor(cut))
data_2 %>% head()
# Chunk 10
# Preprocessor
recipe_cp <- recipe(cut ~ price, data = data_2) %>%
step_normalize()
# Logistic regression model
log_reg_model <- logistic_reg() %>%
set_mode('classification') %>%
set_engine('glm')
# Workflow
wf_cp <- workflow() %>%
add_recipe(recipe_cp) %>%
add_model(log_reg_model)
wf_cp
# Chunk 11
# Preprocessor
recipe_cv <- recipe(cut ~ volume, data = data_2) %>%
step_normalize()
# Workflow
wf_cv <- workflow() %>%
add_recipe(recipe_cv) %>%
add_model(log_reg_model)
wf_cv
# Chunk 12: data_2
# Fit the models
fit_cp <- fit(wf_cp, data = data_2)
fit_cv <- fit(wf_cv, data = data_2)
# Predict probabilities and add true class to predictions
pred_price <- predict(fit_cp, data_2, type = "prob") %>%
bind_cols(data_2 %>% dplyr::select(cut))
pred_volume <- predict(fit_cv, data_2, type = "prob") %>%
bind_cols(data_2 %>% dplyr::select(cut))
# Calculate ROC curve metrics
roc_price <- pred_price %>%
roc_curve(truth = cut, .pred_ideal)
roc_volume <- pred_volume %>%
roc_curve(truth = cut, .pred_ideal)
# Add model names to each table
roc_price <- roc_price %>%
mutate(model = "Price")
roc_volume <- roc_volume %>%
mutate(model = "Volume")
# Combine the two tables
roc_data <- bind_rows(roc_price, roc_volume)
# Plot ROC curves
ggplot(roc_data, aes(x = 1 - specificity, y = sensitivity, color = model)) +
geom_line() +
geom_abline(linetype = "dashed") +
labs(x = "1 - specificity",
y = "sensitivity") +
theme_minimal() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 0.5))
# Plot ROC curves
ggplot(roc_data, aes(x = 1 - specificity, y = sensitivity, color = model)) +
geom_line() +
geom_abline(linetype = "dashed") +
labs(x = "1 - specificity",
y = "sensitivity") +
theme_minimal() +
theme(panel.border = linewidth(color = "black", fill = NA, size = 0.5))
element_rect
# Plot ROC curves
ggplot(roc_data, aes(x = 1 - specificity, y = sensitivity, color = model)) +
geom_line() +
geom_abline(linetype = "dashed") +
labs(x = "1 - specificity",
y = "sensitivity") +
theme_minimal() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 0.5))
setwd("C:/Users/nguye/Music/2024 Tri 2_Using Machine Learning Tools/Assignment 1/")
df <- read.csv('SeouLBikeData.csv')
View(df)
df_cleaned <- read.csv('SeoulBikeData_Cleaned.csv')
View(df_cleaned)
