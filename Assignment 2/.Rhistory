scale_x_continuous(breaks = 2:7) +
theme(text = element_text(size = 40)) +
theme_minimal()
q2 %>%
ggplot(aes(x = X, y = cdf(Pr))) +
geom_bar(stat="identity", width=0.7, color='black', fill='lightblue') +
labs(x = 'X',
y = 'Probability',
title="Probability Mass Function (PMF) of X",) +
scale_x_continuous(breaks = 2:7) +
theme(text = element_text(size = 40)) +
theme_minimal()
# Sample data
data <- tibble(probability = c(0.1, 0.2, 0.3, 0.4))
# Calculate CDF
data$cdf <- cumsum(data$probability)
# View the resulting tibble
print(data)
q2 %>%
ggplot(aes(x = X, y = cumsum(Pr))) +
geom_bar(stat="identity", width=0.7, color='black', fill='lightblue') +
labs(x = 'X',
y = 'Probability',
title="Probability Mass Function (PMF) of X",) +
scale_x_continuous(breaks = 2:7) +
theme(text = element_text(size = 40)) +
theme_minimal()
q2
lenth(q2)
length(q2)
length(q2$X)
total <- total + (q2$X[i] ** 3) * q2$Pr[i]
total <- 0
n <- length(length(q2$X))
for (i in 1:n) {
total <- total + (q2$X[i] ** 3) * q2$Pr[i]
}
total
library(tidyverse)
df <- read.csv('SeouLBikeData.csv')
check <- as_tibble(df[0:1,])
View(df)
q2 %>%
ggplot(aes(x = X, y = Pr)) +
geom_step() +
labs(x = 'X',
y = 'Probability',
title="Probability Mass Function (PMF) of X",) +
scale_x_continuous(breaks = 1:7) +
theme(text = element_text(size = 40)) +
theme_minimal()
q2 %>%
ggplot(aes(x = X, y = Pr)) +
geom_stem() +
labs(x = 'X',
y = 'Probability',
title="Probability Mass Function (PMF) of X",) +
scale_x_continuous(breaks = 1:7) +
theme(text = element_text(size = 40)) +
theme_minimal()
q2 %>%
ggplot(aes(x = X, y = Pr)) +
geom_step() +
labs(x = 'X',
y = 'Probability',
title="Probability Mass Function (PMF) of X",) +
scale_x_continuous(breaks = 1:7) +
theme(text = element_text(size = 40)) +
theme_minimal()
q2 %>%
ggplot(aes(x = X, y = Pr)) +
geom_bar() +
labs(x = 'X',
y = 'Probability',
title="Probability Mass Function (PMF) of X",) +
scale_x_continuous(breaks = 1:7) +
theme(text = element_text(size = 40)) +
theme_minimal()
q2 %>%
ggplot(aes(Pr)) +
geom_bar() +
labs(x = 'X',
y = 'Probability',
title="Probability Mass Function (PMF) of X",) +
scale_x_continuous(breaks = 1:7) +
theme(text = element_text(size = 40)) +
theme_minimal()
q2 <- tibble(
X = c(1:7),
Pr = c(1/43, 9/43, 10/43, 3/43, 6/43, 8/43, 6/43)
)
q2 %>%
ggplot(aes(Pr)) +
geom_bar() +
labs(x = 'X',
y = 'Probability',
title="Probability Mass Function (PMF) of X",) +
scale_x_continuous(breaks = 1:7) +
theme(text = element_text(size = 40)) +
theme_minimal()
q2 %>%
ggplot(aes(Pr)) +
geom_bar(alpha = 0.5) +
labs(x = 'X',
y = 'Probability',
title="Probability Mass Function (PMF) of X",) +
scale_x_continuous(breaks = 1:7) +
theme(text = element_text(size = 40)) +
theme_minimal()
q2 %>%
ggplot(aes(Pr)) +
geom_bar(stat = "identity", alpha = 0.5) +
labs(x = 'X',
y = 'Probability',
title="Probability Mass Function (PMF) of X",) +
scale_x_continuous(breaks = 1:7) +
theme(text = element_text(size = 40)) +
theme_minimal()
q2 %>%
ggplot(aes(x = X)) +
geom_bar(y = Pr, stat = "identity", alpha = 0.5) +
labs(x = 'X',
y = 'Probability',
title="Probability Mass Function (PMF) of X",) +
scale_x_continuous(breaks = 1:7) +
theme(text = element_text(size = 40)) +
theme_minimal()
q2 %>%
ggplot(aes(x = X)) +
geom_bar(aes(y = Pr), stat = "identity", alpha = 0.5) +
labs(x = 'X',
y = 'Probability',
title="Probability Mass Function (PMF) of X",) +
scale_x_continuous(breaks = 1:7) +
theme(text = element_text(size = 40)) +
theme_minimal()
q2 %>%
ggplot(aes(x = X)) +
geom_bar(aes(y = Pr), stat = 'identity', alpha = 0.5) +
labs(x = 'X',
y = 'Probability',
title="Probability Mass Function (PMF) of X",) +
scale_x_continuous(breaks = 1:7) +
theme(text = element_text(size = 40)) +
theme_minimal()
q2 %>%
ggplot(aes(x = X)) +
geom_bar(aes(y = Pr), stat = 'identity', alpha = 0.5, width = 0.1) +
labs(x = 'X',
y = 'Probability',
title="Probability Mass Function (PMF) of X",) +
scale_x_continuous(breaks = 1:7) +
theme(text = element_text(size = 40)) +
theme_minimal()
q2 %>%
ggplot(aes(x = X)) +
geom_bar(aes(y = Pr), stat = 'identity', alpha = 0.5, width = 0.01) +
labs(x = 'X',
y = 'Probability',
title="Probability Mass Function (PMF) of X",) +
scale_x_continuous(breaks = 1:7) +
theme(text = element_text(size = 40)) +
theme_minimal()
q2 %>%
ggplot(aes(x = X)) +
geom_bar(aes(y = Pr), stat = 'identity', alpha = 1, width = 0.01) +
labs(x = 'X',
y = 'Probability',
title="Probability Mass Function (PMF) of X",) +
scale_x_continuous(breaks = 1:7) +
theme(text = element_text(size = 40)) +
theme_minimal()
q2 %>%
ggplot(aes(x = X)) +
geom_bar(aes(y = Pr), stat = 'identity', alpha = 1, width = 0.02) +
labs(x = 'X',
y = 'Probability',
title="Probability Mass Function (PMF) of X",) +
scale_x_continuous(breaks = 1:7) +
theme(text = element_text(size = 40)) +
theme_minimal()
plot(x = NA, y = NA, pch = NA,
xlim = c(1, max(x)),
ylim = c(0, 1),
xlab = "X",
ylab = "Probability",
main = "Probability Mass Function (PMF) of X")
x <- 1:7
fx <- c(1/43, 9/43, 10/43, 3/43, 6/43, 8/43, 6/43)
n <- length(x)
plot(x = NA, y = NA, pch = NA,
xlim = c(1, max(x)),
ylim = c(0, 1),
xlab = "X",
ylab = "Probability",
main = "Probability Mass Function (PMF) of X")
for(i in 1:(n-1)) points(x=x[i+0:1], y=fx[c(i,i)+1], type="l")
for(i in 1:(n-1)) points(x=x[i], y=fx[c(i,i)+1], type="l")
for(i in 1:(n-1)) points(x=x[i], y=fx[c(i)], type="l")
plot(x = NA, y = NA, pch = NA,
xlim = c(1, max(x)),
ylim = c(0, 1),
xlab = "X",
ylab = "Probability",
main = "Probability Mass Function (PMF) of X")
for(i in 1:(n-1)) points(x=x[i], y=fx[c(i)], type="l")
x <- 1:7
fx <- c(1/43, 9/43, 10/43, 3/43, 6/43, 8/43, 6/43)
n <- length(x)
plot(x = NA, y = NA, pch = NA,
xlim = c(1, max(x)),
ylim = c(0, 1),
xlab = "X",
ylab = "Probability",
main = "Probability Mass Function (PMF) of X")
# Plot points
points(x, fx, pch=16)
# Draw horizontal lines for each x
for(i in 1:n) {
segments(x0 = x[i], y0 = 0, x1 = x[i], y1 = fx[i], col="blue")
}
# Plot points
points(x, fx, pch=0)
# Plot points
points(x, fx)
x <- 1:7
fx <- c(1/43, 9/43, 10/43, 3/43, 6/43, 8/43, 6/43)
n <- length(x)
plot(x = NA, y = NA, pch = NA,
xlim = c(1, max(x)),
ylim = c(0, 1),
xlab = "X",
ylab = "Probability",
main = "Probability Mass Function (PMF) of X")
# Plot points
#points(x, fx)
# Draw horizontal lines for each x
for(i in 1:n) {
segments(x0 = x[i], y0 = 0, x1 = x[i], y1 = fx[i], col="blue")
x <- 1:7
fx <- c(1/43, 9/43, 10/43, 3/43, 6/43, 8/43, 6/43)
Fx <- cumsum(fx)
n <- length(x)
plot(x = NA, y = NA, pch = NA,
xlim = c(1, max(x)),
ylim = c(0, 1),
xlab = "X",
ylab = "Probability",
main = "Cumulative Distribution Function (CDF) of X")
points(x = x[-n], y = Fx[-1], pch=19)
points(x = x[-1], y = Fx[-1], pch=1)
for(i in 1:(n-1)) points(x=x[i+0:1], y=Fx[c(i,i)+1], type="l")
q2 %>%
ggplot(aes(x = X, y = cumsum(Pr))) +
geom_step() +
labs(x = 'X',
y = 'Probability',
title="Cumulative Distribution Function (CDF) of X",) +
scale_x_continuous(breaks = 0:7) +
theme(text = element_text(size = 40)) +
theme_minimal()
x <- 1:7
fx <- c(1/43, 9/43, 10/43, 3/43, 6/43, 8/43, 6/43)
Fx <- cumsum(fx)
n <- length(x)
plot(x = NA, y = NA, pch = NA,
xlim = c(1, max(x)),
ylim = c(0, 1),
xlab = "X",
ylab = "Probability",
main = "Cumulative Distribution Function (CDF) of X")
points(x = x[-n], y = Fx[-1], pch=19)
points(x = x[-1], y = Fx[-1], pch=1)
for(i in 1:(n-1)) points(x=x[i+0:1], y=Fx[c(i,i)+1], type="l")
x <- 1:7
fx <- c(1/43, 9/43, 10/43, 3/43, 6/43, 8/43, 6/43)
Fx <- cumsum(fx)
n <- length(x)
plot(x = NA, y = NA, pch = NA,
xlim = c(1, max(x)),
ylim = c(0, 1),
xlab = "X",
ylab = "Probability",
main = "Cumulative Distribution Function (CDF) of X")
points(x = x[-n], y = Fx[-1], pch=19)
points(x = x[-1], y = Fx[-1], pch=1)
for(i in 1:(n-1)) points(x=x[i+0:1], y=Fx[c(i,i)+1], type="l")
x <- 1:7
fx <- c(1/43, 9/43, 10/43, 3/43, 6/43, 8/43, 6/43)
Fx <- cumsum(fx)
n <- length(x)
plot(x = NA, y = NA, pch = NA,
xlim = c(1, max(x)),
ylim = c(0, 1),
xlab = "X",
ylab = "Probability",
main = "Cumulative Distribution Function (CDF) of X")
points(x = x[-n], y = Fx[-1], pch=19)
points(x = x[-1], y = Fx[-1], pch=1)
for(i in
for(i in 1:(n-1)) points(x=x[i+0:1], y=Fx[c(i,i)+1], type="l")
library(tidymodels)
pacman::p_load(tidyverse, tidymodels, discrim, palmerpenguins)
data("penguins", package = "palmerpenguins")
penguins
penguin_recipe <- recipe(species ~ bill_length_mm + bill_depth_mm,
data = penguins) %>%
step_impute_mean(all_predictors())
penguin_recipe %>% prep() %>% tidy(n = 1)
penguin_recipe %>% prep()
penguin_recipe %>% prep() %>% tidy(n = 1)
penguin_recipe %>% prep() %>% tidy()
penguin_recipe %>% prep() %>% tidy(n = 1)
penguins_model <- discrim_linear() %>%
set_mode('classification')
penguins_model
penguin_wf <- workflow() %>%
add_recipe(penguin_recipe) %>%
add_model(penguin_model)
penguin_model <- discrim_linear() %>%
set_mode('classification')
penguins_model
penguin_model
penguin_wf <- workflow() %>%
add_recipe(penguin_recipe) %>%
add_model(penguin_model)
penguin_wf
penguin_fit <- penguin_wf %>%
fit(penguins)
penguin_fit
new_data <- crossing(
bill_length_mm = seq(
from = min(penguins$bill_length_mm, na.rm = TRUE),
to = max(penguins$bill_length_mm, na.rm = TRUE),
length = 500
),
bill_depth_mm = seq(
from = min(penguins$bill_depth_mm, na.rm = TRUE),
to = max(penguins$bill_depth_mm, na.rm = TRUE),
length = 500
)
)
new_data %>%
add_column(
predict(penguin_fit, new_data = new_data)
) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, fill = .pred_class)) +
geom_raster() +
labs(
fill = "Species",
x = "Bill length (mm)",
y = "Bill depth (mm)"
) +
theme_bw() +
viridis::scale_fill_viridis(option="D", discrete=TRUE)
pacman::p_load(tidyverse, tidymodels, discrim, palmerpenguins, viridis)
install.packages("viridis")
install.packages("viridis")
install.packages("viridis")
pacman::p_load(tidyverse, tidymodels, discrim, palmerpenguins)
data("penguins", package = "palmerpenguins")
penguins
penguin_recipe <- recipe(species ~ bill_length_mm + bill_depth_mm,
data = penguins) %>%
step_impute_mean(all_predictors())
penguin_recipe %>% prep() %>% tidy()
penguin_recipe %>% prep() %>% tidy(n = 1)
penguin_model <- discrim_linear() %>%
set_mode('classification')
penguin_model
penguin_wf <- workflow() %>%
add_recipe(penguin_recipe) %>%
add_model(penguin_model)
penguin_wf
penguin_fit <- penguin_wf %>%
fit(penguins)
penguin_fit
new_data <- crossing(
bill_length_mm = seq(
from = min(penguins$bill_length_mm, na.rm = TRUE),
to = max(penguins$bill_length_mm, na.rm = TRUE),
length = 500
),
bill_depth_mm = seq(
from = min(penguins$bill_depth_mm, na.rm = TRUE),
to = max(penguins$bill_depth_mm, na.rm = TRUE),
length = 500
)
)
new_data %>%
add_column(
predict(penguin_fit, new_data = new_data)
) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, fill = .pred_class)) +
geom_raster() +
labs(
fill = "Species",
x = "Bill length (mm)",
y = "Bill depth (mm)"
) +
theme_bw() +
viridis::scale_fill_viridis(option="D", discrete=TRUE)
penguin_model2 <- discrim_quad() %>%
set_mode('classification')
penguin_model2
penguin_wf2 <- workflow() %>%
add_recipe(penguin_recipe) %>%
add_model(penguin_model2)
penguin_wf2
penguin_fit2 <- penguin_wf %>%
fit(penguins)
penguin_fit2
new_data %>%
add_column(
predict(penguin_fit2, new_data = new_data)
) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, fill = .pred_class)) +
geom_raster() +
labs(
fill = "Species",
x = "Bill length (mm)",
y = "Bill depth (mm)"
) +
theme_bw() +
viridis::scale_fill_viridis(option="D", discrete=TRUE)
new_data %>%
add_column(
predict(penguin_fit2, new_data = new_data)
) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, fill = .pred_class)) +
geom_raster() +
labs(
fill = "Species",
x = "Bill length (mm)",
y = "Bill depth (mm)",
title = 'QDA'
) +
theme_bw() +
viridis::scale_fill_viridis(option="D", discrete=TRUE)
new_data %>%
add_column(
predict(penguin_fit, new_data = new_data)
) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, fill = .pred_class)) +
geom_raster() +
labs(
fill = "Species",
x = "Bill length (mm)",
y = "Bill depth (mm)",
title = 'LDA'
) +
theme_bw() +
viridis::scale_fill_viridis(option="D", discrete=TRUE)
penguin_fit2 <- penguin_wf2 %>%
fit(penguins)
penguin_fit2
new_data %>%
add_column(
predict(penguin_fit2, new_data = new_data)
) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, fill = .pred_class)) +
geom_raster() +
labs(
fill = "Species",
x = "Bill length (mm)",
y = "Bill depth (mm)",
title = 'QDA'
) +
theme_bw() +
viridis::scale_fill_viridis(option="D", discrete=TRUE)
penguins
penguin_wf
penguin_recipe %>% prep() %>% tidy(n = 1)
penguin_recipe %>% prep() %>% tidy(n = 2)
penguin_recipe %>% prep() %>% tidy(n = 1)
penguin_recipe %>% prep() %>% tidy(n = 1)[2]
penguin_recipe %>% prep() %>% tidy(n = 1) %>% kable()
penguin_recipe %>% prep() %>% tidy(n = 1)
library(tidymodels)
data(mpg, package = 'ggplot2')
mpg
mpg_recipe <- recipe(cty ~ displ + drv, data = mpg)
mpg_recipe
mpg_recipe <- mpg_recipe %>%
step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors())
mpg_recipe
mpg_recipe %>% prep()
mpg_recipe %>% prep() %>% tidy()
mpg_recipe %>% prep() %>% tidy(n = 1)
mpg_recipe <- mpg_recipe %>%
step_dummy(all_nominal_predictors())
mpg_recipe
mpg_recipe %>% prep() %>% tidy()
mpg_recipe %>% prep() %>% tidy(n = 3)
mpg_recipe <- mpg_recipe %>%
step_interact(terms = ~starts_with('drv'):displ)
mpg_recipe
mpg_recipe %>% prep() %>% tidy(n = 4)
penguin_recipe %>% prep() %>% tidy(n = 1)
penguin_recipe %>% prep() %>% tidy(n = 1) -> a
a[2,2]
library(tidyverse)
df <- read.csv('C:\Users\nguye\Music\2024 Tri 2_Using Machine Learning Tools\Assignment 2\assignment2_data_2_2024.csv')
df <- read.csv('C:/Users/nguye/Music/2024 Tri 2_Using Machine Learning Tools/Assignment 2/assignment2_data_2_2024.csv')
df <- read.csv('./Users/nguye/Music/2024 Tri 2_Using Machine Learning Tools/Assignment 2/assignment2_data_2_2024.csv')
setwd("C:/Users/nguye/Music/2024 Tri 2_Using Machine Learning Tools/Assignment 2/")
df <- read.csv('assignment2_data_2_2024.csv')
df <- read.csv('assignment2_data2_2024.csv')
df <- read.csv('assignment2_data_2024.csv')
df <- read.csv('assignment2_data_2024.csv')
View(df)
